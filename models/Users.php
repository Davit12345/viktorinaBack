<?php

namespace app\models;

use app\helpers\Functions;
use DateTime;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\db\Exception;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "users".
 *
 * @property int $id
 * @property string|null $email
 * @property string|null $username
 * @property string|null $phone
 * @property string|null $password
 * @property int|null $code
 * @property int|null $status
 * @property int|null $coins
 * @property string|null $fname
 * @property string|null $last_active
 * @property string|null $last_get_coin_ts
 * @property string|null $lname
 * @property string|null $token
 */
class Users extends \yii\db\ActiveRecord implements IdentityInterface
{

    const STATUS_NEW = 0;
    const STATUS_ACTIVE = 1;

    const SCENARIO_REGISTER = 'scenario_register';
    const SCENARIO_LOGIN = 'scenario_login';

    public $confirm_password = '';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'users';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['code', 'status', 'id', 'coins'], 'integer'],
            [['last_active', 'last_get_coin_ts'], 'safe'],
            [['email', 'phone', 'password', 'fname', 'lname', 'token', 'username'], 'string', 'max' => 255],
            [['email', 'password', 'fname', 'lname', 'confirm_password'], 'required', 'on' => self::SCENARIO_REGISTER],
            ['confirm_password', 'compare', 'compareAttribute' => 'password', 'message' => "Passwords don't match", 'on' => self::SCENARIO_REGISTER],
            [['username', 'password'], 'required', 'on' => self::SCENARIO_LOGIN],
            [['username'], 'checkUsername', 'message' => "Dublicate usernaem", 'on' => self::SCENARIO_REGISTER],
            [['email'], 'checkEmailExist', 'message' => "Dublicate email", 'on' => self::SCENARIO_REGISTER],


        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'email' => Yii::t('app', 'Email'),
            'phone' => Yii::t('app', 'Phone'),
            'password' => Yii::t('app', 'Password'),
            'code' => Yii::t('app', 'Code'),
            'status' => Yii::t('app', 'Status'),
            'fname' => Yii::t('app', 'Name'),
            'lname' => Yii::t('app', 'Surname'),
            'token' => Yii::t('app', 'Token'),
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->password = Yii::$app->getSecurity()->generatePasswordHash($this->password);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function checkUsername()
    {
        $user = Users::findOne(['username' => $this->username, 'status' => Users::STATUS_ACTIVE]);
        if ($user) {
            throw  new Exception('duplicate username');
            return false;
        }
    }

    public function checkEmailExist()
    {
        $user = Users::findOne(['email' => $this->email, 'status' => Users::STATUS_ACTIVE]);
        if ($user) {
            throw  new Exception('duplicate email');

            return false;
        }
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    public static function findIdentity($id)
    {
        $user = self::findOne($id);
        if (!is_null($user))
            return $user;
        return null;
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        if ($type == JwtHttpBearerAuth::className()) {
            return static::find()
                ->where(['id' => (string)$token->getClaim('uid')])
                ->one();
        }
        if ($token) {
            return Users::find()->where(['token' => $token])->one();
        }
        return null;
    }


    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        return '';
    }

    public function validateAuthKey($authKey)
    {
        return '';
    }

    public static function getDailyInfo()
    {
        $user = Yii::$app->user->identity;

        $currentDate = new DateTime();
        $specificDate = new DateTime($user->last_get_coin_ts);
        $interval = $currentDate->diff($specificDate);
        $days = $interval->format('%a');
        if ($days > 0) {
            $user->last_get_coin_ts = Functions::sqlDateFormat($currentDate->format("Y-m-d H:i:s"));
            if ($user->coins) {
                $user->coins = $user->coins + 200;
            } else {
                $user->coins = 1000;
            }

            $user->save();
            return true;
        } else {
            return false;
        }
    }
}

<?php
namespace app\controllers\api;

//use app\helpers\Msg;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\HttpException;
use yii\web\Response;



class ApiBaseController extends Controller
{

//    static $_MODULE = IoLog::MODULE_MOBILE;

    public function behaviors()
    {
//        if(\Yii::$app->request->method =='OPTIONS'){
//            return parent::behaviors();
//        }
        $behaviors['authenticator'] = [
            'class' => \sizeg\jwt\JwtHttpBearerAuth::class,
            'except' => [
                'login',
                'refresh-token',
                'forgot-password',
                'verification-code',
                'register',
                'registration',
                'add-password',
                'forgot-password-change',
                'forgot-password-reset-code',
                'activation',
                'change-password'
            ],
        ];

        return $behaviors;
    }
    public function init()
    {
        $headers = \Yii::$app->response->headers;
        $headers->add('Access-Control-Allow-Origin', '*');
        $headers->add('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS');
        $headers->add('Access-Control-Allow-Headers', 'Origin, Content-Type,session,Authorization,language');
        $this->enableCsrfValidation = false;
        $_POST = \Yii::$app->request->getBodyParams();
        \Yii::$app->response->format= Response::FORMAT_JSON;
        $Authorization = \Yii::$app->request->headers->get('Authorization');
//        var_dump($Authorization);
//
//        $language = \Yii::$app->request->headers->get('language','hy');
//        Yii::$app->language= $language;
        parent::init(); // TODO: Change the autogenerated stub
    }
    public function beforeAction($action)
    {
//        IoLog::setData([
//            'name' => $action->id,
//            'module' => static::$_MODULE,
//            'type' => IoLog::All,
//            'data' => $_POST,
//            'date' => date('Y-m-d H:i:s')
//        ]);

        set_exception_handler([$this, 'exceptionHandler']);
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    public  function exceptionHandler($exception) {
        $error=$exception->getMessage();
        if($exception instanceof yii\web\UnauthorizedHttpException){
            Yii::$app->response->statusCode = 401;
            $error=['type'=>'invalid_token','message'=>'fstul'];
        }
        if($exception instanceof HttpException){
            Yii::$app->response->statusCode = 200;
        }else{
            Yii::$app->response->statusCode = 500;
            $error = 'qaqy helav'.$exception->getMessage();
        }

        $result = self::createResponse(['error'=>$error]);
        $this->asJson($result);
        $this->afterAction($this->action,$result);
        Yii::$app->end();

    }
//    public function afterAction($action, $result)
//    {
////        if (\Yii::$app->response->statusCode === 200 && \Yii::$app->response->format === 'json') {
////            IoLog::setAnswerData($action->id, $result);
////            IoLog::log2($action->id);
////        }
//        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
//    }
//
    protected function createResponse($data,$formError=false)
    {
        $error = null;
        if (is_array($data)) {
            $error = ArrayHelper::getValue($data, 'error');
        }


        $return = [
            'respcode' => 1,
            'data' => $data
        ];

        if ($error) {
            if(!$formError){
                $return = [
                    'respcode' => 0,
                    'respmess' => $error,
                ];
            }else{
                $return = [
                    'respcode' => 0,
                    'formError'=>$error,
                ];
            }

        }
        return $return;
    }

    protected function createErrorResponse($data = 'error',$formError=false)
    {
        return $this->createResponse(['error' => $data],$formError);
    }

    protected function createFormErrorResponse($errors)
    {
        return $this->createResponse(['formError' => $errors]);
    }


}
